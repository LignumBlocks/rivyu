<div class="relative overflow-x-auto mb-8 ">
  <div class="flex items-center justify-between flex-column pl-6 flex-wrap md:flex-row md:space-y-0 bg-white dark:bg-gray-900">
    <div class="">
      <% breadcrumbs = [["Superhacks", superhacks_path]]%>
      <%= render partial: "layouts/breadcrumbs", locals: { breadcrumbs: breadcrumbs } %>
    </div>
    <div class="flex items-center justify-end flex-column flex-wrap md:flex-row md:space-y-0 bg-white dark:bg-gray-900">
      <div class="mr-4 mt-2 p-8">

      </div>   
    </div>
  </div>

  <div class="p-6">
    <div>
      <%= search_form_for @q, url: superhacks_path, method: :get, id: "filtersForm" do |f| %>
        <div class="grid grid-cols-4 gap-4">
          <div class="flex flex-col gap-2">
            <div>
              <%= render partial: 'dropdown_filter', locals: {
                dropdown_button_id: 'dropdownButton-risks',
                dropdown_menu_id: 'dropdownMenu-risks',
                label: 'All Targets',
                collection: Category.targets_categories.for_super_hacks,
                filter_name: 'q[with_target_ids][]',
                field_prefix: 'risk',
                selected_items: params.dig(:q, :with_target_ids)
              } %>
            </div>
          </div>

          <div class="flex flex-col gap-2">
            <div>
              <%= render partial: 'dropdown_filter', locals: {
                dropdown_button_id: 'dropdownButton-financials',
                dropdown_menu_id: 'dropdownMenu-financials',
                label: 'All Goals',
                collection: Category.goals_categories.for_super_hacks,
                filter_name: 'q[with_goal_ids][]',
                field_prefix: 'financial',
                selected_items: params.dig(:q, :with_goal_ids)
              } %>
            </div>
          </div>

          <div class="flex flex-row gap-4">
            <%= f.submit "Apply filters", class: "btn-sm btn-success text-white text-sm rounded" %>
            <button type="button" class="btn-sm btn-danger text-white text-sm rounded"
                    onclick="cleanFilters('filtersForm')">
              Clean filters
            </button>
          </div>
        </div>
    <% end %>
   <div>
  </div>
  </div>
    <span class="flex flex-wrap gap-2 mt-4">
      <% params[:q]&.each do |key, value| %>
        <% next if value.blank? %>

        <% if key.to_s == "is_advice_eq"%>
          <% text = value == "true" ? "Only Advice" : "Only Hacks"%>
          <div class="inline-flex flex-wrap gap-4">
              <div class="inline-flex flex-nowrap items-center bg-white border border-gray-200 rounded-full p-1.5 text-sm dark:bg-neutral-900 dark:border-neutral-700">
                <div class="whitespace-nowrap pl-2 text-gray-800 dark:text-white">
                  <%= text %>
                </div>
                <div class="ms-2.5 inline-flex justify-center items-center rounded-full text-gray-800 bg-gray-200 hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400 dark:bg-neutral-700/50 dark:hover:bg-neutral-700 dark:text-neutral-400 cursor-pointer"
                     onclick="clearSelection('q_is_advice_eq')">
                  <svg class="shrink-0 size-3 p-1" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M18 6 6 18"></path>
                    <path d="m6 6 12 12"></path>
                  </svg>
                </div>
              </div>
            </div>
        <% elsif key.to_s == "source_id_eq"%>
          <div class="inline-flex flex-wrap gap-4">
              <div class="inline-flex flex-nowrap items-center bg-white border border-gray-200 rounded-full p-1.5 text-sm dark:bg-neutral-900 dark:border-neutral-700">
                <div class="whitespace-nowrap pl-2 text-gray-800 dark:text-white">
                  <%= Source.find(value).name %>
                </div>
                <div class="ms-2.5 inline-flex justify-center items-center rounded-full text-gray-800 bg-gray-200 hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400 dark:bg-neutral-700/50 dark:hover:bg-neutral-700 dark:text-neutral-400 cursor-pointer"
                     onclick="clearSelection('q_source_id_eq')">
                  <svg class="shrink-0 size-3 p-1" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M18 6 6 18"></path>
                    <path d="m6 6 12 12"></path>
                  </svg>
                </div>
              </div>
            </div>
        <% else %>
          <% key_humanized = key.split('_') %>
            <% key_humanized.pop %>
            <% key_humanized = key_humanized.join('_').humanize %>
            <% categories = Category.where(id: value) %>
            <% categories.each do |category| %>
              <div class="inline-flex flex-wrap gap-4">
                <div class="inline-flex flex-nowrap items-center bg-white border border-gray-200 rounded-full p-1.5 text-sm dark:bg-neutral-900 dark:border-neutral-700">
                  <div class="whitespace-nowrap pl-2 text-gray-800 dark:text-white">
                    <%= category.name %>
                  </div>
                  <div class="ms-2.5 inline-flex justify-center items-center rounded-full text-gray-800 bg-gray-200 hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400 dark:bg-neutral-700/50 dark:hover:bg-neutral-700 dark:text-neutral-400 cursor-pointer"
                       onclick="handleChipClose(<%= category.id %>)">
                    <svg class="shrink-0 size-3 p-1" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round">
                      <path d="M18 6 6 18"></path>
                      <path d="m6 6 12 12"></path>
                    </svg>
                  </div>
                </div>
              </div>
            <% end %>
          <% end %>
        <% end %>
    </span>
  </div>
    <div class="flex justify-end pt-6">
      <nav class="flex gap-4 p-2 pl-6 px-4 items-center justify-end flex-column flex-wrap md:flex-row justify-between" aria-label="Table navigation">
            <span class="text-sm font-normal text-gray-500 dark:text-gray-400 mb-4 md:mb-0 block w-full md:inline md:w-auto">
              <%= t("helpers.page.showing") %> <span class="font-semibold text-gray-900 dark:text-white"><%= "#{@pagy.from}-#{@pagy.to}" %></span> <%= t("helpers.page.of") %> <span class="font-semibold text-gray-900 dark:text-white"><%= @pagy.count %></span></span>
        <ul class="inline-flex -space-x-px rtl:space-x-reverse text-sm h-8 list-none">
          <li>
            <%= link_to t("helpers.page.previous"), superhacks_path(params.to_unsafe_h.merge(page: @pagy.prev)),
                        {
                          disabled: @pagy.prev.blank?,
                          class: "flex items-center justify-center px-3 h-8 ms-0 leading-tight text-gray-500 bg-white border border-gray-300 rounded-s-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
                        } %>
          </li>
          <% @pagy.series.each do |page| %>
            <li>
              <% if page.is_a?(Integer) %>
                <%= link_to page.to_s, superhacks_path(params.to_unsafe_h.merge(page: page)),
                            class: "flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white" %>
              <% else %>
                <span class="flex items-center justify-center px-3 h-8 text-gray-500">...</span>
              <% end %>
            </li>
          <% end %>
          <li>
            <%= link_to t("helpers.page.next"), superhacks_path(params.to_unsafe_h.merge(page: @pagy.next)),
                        {
                          disabled: @pagy.next.blank?,
                          class: "flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 rounded-e-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
                        } %>
          </li>
        </ul>

      </nav>

    </div>
    <div class="table-container">
    <table class="mt-2 w-full border border-gray-200 text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
      <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
      <tr>
        <th scope="col" class="px-6 py-3 w-96">
          Title
        </th>
        <th scope="col" class="px-0 py-3 text-center">
          Target User Profile
        </th>
        <th scope="col" class="px-0 py-3 text-center">
          Goals
        </th>
      </tr>
      </thead>
      <tbody>
      <% @superhacks.each do |hack|%>
        <tr class="bg-white cursor-pointer border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600"
            onclick="window.location='<%= superhack_path(id: hack) %>'">
          <td class="flex flex-col w-full text-left text-gray-900 dark:text-white px-2 w-96">
            <div class="ps-4 px-0">
              <div class="text-base font-semibold mb-2"><%= hack.title %></div>
              <div class="font-normal text-gray-500 line-clamp-2"><%= hack.description %></div>
            </div>
          </td>

          <td class="px-0 py-2 text-center ">
            <div class="inline-flex">
              <span class="bg-gray-100 text-gray-800 text-xs font-medium border border-gray-300 me-2 px-2.5 py-0.5 rounded dark:bg-blue-900 dark:text-blue-300"> <%= hack.categories.targets_categories.for_super_hacks.map(&:name).to_sentence %></span>
            </div>
          </td>

          <td class="px-0 py-2 text-center">
            <div class="inline-flex">
              <span class="bg-gray-100 text-gray-800 text-xs font-medium border border-gray-300 me-2 px-2.5 py-0.5 rounded dark:bg-blue-900 dark:text-blue-300"> <%= hack.categories.goals_categories.for_super_hacks.map(&:name).to_sentence %></span>
            </div>
          </td>
        </tr>      
      <% end %>
      </tbody>
    </table>
    </div>

    <nav class="flex gap-4 p-2 pl-6 px-4 items-center justify-end flex-column flex-wrap md:flex-row justify-between" aria-label="Table navigation">
            <span class="text-sm font-normal text-gray-500 dark:text-gray-400 mb-4 md:mb-0 block w-full md:inline md:w-auto">
              <%= t("helpers.page.showing") %> <span class="font-semibold text-gray-900 dark:text-white"><%= "#{@pagy.from}-#{@pagy.to}" %></span> <%= t("helpers.page.of") %> <span class="font-semibold text-gray-900 dark:text-white"><%= @pagy.count %></span></span>
      <ul class="inline-flex -space-x-px rtl:space-x-reverse text-sm h-8 list-none">
        <li>
          <%= link_to t("helpers.page.previous"), superhacks_path(params.to_unsafe_h.merge(page: @pagy.prev)),
                      {
                        disabled: @pagy.prev.blank?,
                        class: "flex items-center justify-center px-3 h-8 ms-0 leading-tight text-gray-500 bg-white border border-gray-300 rounded-s-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
                      } %>
        </li>
        <% @pagy.series.each do |page| %>
          <li>
            <% if page.is_a?(Integer) %>
              <%= link_to page.to_s, superhacks_path(params.to_unsafe_h.merge(page: page)),
                          class: "flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white" %>
            <% else %>
              <span class="flex items-center justify-center px-3 h-8 text-gray-500">...</span>
            <% end %>
          </li>
        <% end %>
        <li>
          <%= link_to t("helpers.page.next"), superhacks_path(params.to_unsafe_h.merge(page: @pagy.next)),
                      {
                        disabled: @pagy.next.blank?,
                        class: "flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 rounded-e-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
                      } %>
        </li>
      </ul>

    </nav>
  </div>
    
</div>
</div>

<script>
    function cleanFilters(formId) {
        const spinner = document.getElementById("loading-spinner");
        spinner.classList.remove("hidden");
        const form = document.getElementById(formId);
        if (!form) {
            console.error(`Formulario con ID '${formId}' no encontrado.`);
            return;
        }

        Array.from(form.elements).forEach((element) => {
            if (element.tagName === "SELECT") {
                element.selectedIndex = 0;
            } else if (element.tagName === "INPUT") {
                if (element.type === "text" || element.type === "number" || element.type === "date") {
                    // Limpiar campos de texto, números y fechas
                    element.value = "";
                } else if (element.type === "checkbox" || element.type === "radio") {
                    // Deseleccionar checkboxes y radios
                    element.checked = false;
                }
            }
        });
         form.submit();
    }

</script>

<script>
    // Toggle dropdown visibility
    function toggleDropdown(dropdownId) {
        const dropdown = document.getElementById(dropdownId);
        dropdown.classList.toggle("hidden");
    }

    // Hide dropdown on click outside, but ignore clicks on dropdown itself
    document.addEventListener("click", (event) => {
        document.querySelectorAll("[id^='dropdownMenu']").forEach((dropdown) => {
            const buttonId = dropdown.id.replace("dropdownMenu", "dropdownButton");
            const button = document.getElementById(buttonId);
            if (!button.contains(event.target) && !dropdown.contains(event.target)) {
                dropdown.classList.add("hidden");
            }
        });
    });

</script>

<script>
    function handleChipClose(categoryId) {
        const spinner = document.getElementById("loading-spinner");
        spinner.classList.remove("hidden");
        const form = document.getElementById('filtersForm');
        const checkbox = document.getElementById(`category-${categoryId}`);
        checkbox.checked = !checkbox.checked;
        form.submit();
    }

    function clearSelection(selector) {
        const spinner = document.getElementById("loading-spinner");
        spinner.classList.remove("hidden");
        const selectElement = document.getElementById(selector);
        selectElement.value = '';
        const form = document.getElementById('filtersForm');
        form.submit();
    }
</script>



